/**
\page user_referenceBuildingPelican Building the Pelican library

Pelican uses a CMake (<a href="http://www.cmake.org" target="_blank">
www.cmake.org</a>) build system and requires CMake 2.4 or higher.

In order to build the Pelican library (example commands are given for Linux
systems):

<ol>
    <li> Create a folder for the build. \code mkdir build \endcode
    <li> Move into the build folder. \code cd build \endcode
    <li> Run CMake and point at the top level CMakeLists.txt file.
         \code cmake ../path/to/CMakeLists.txt
         [\ref user_referenceBuildingPelican_options OPTIONS] \endcode
    <li> Run make to build the code. \code make \endcode
    <li> [optional] Install Pelican (may need root permission depending on
        the specified install location). \code make install \endcode
</ol>

In order to check if the Pelican build was successful run <tt> Make test </tt>
from the top level build directory to launch the set of unit tests.

\sections user_referenceBuildingPelican_options Build Options

When running cmake to construct the makefiles there are a number of build
options that can be selected.

- \c -DCMAKE_BUILD_TYPE={release or debug} (default: debug): Build in release
     or debug mode.
- \c -DCMAKE_INSTALL_PREFIX={path}: Root directory used to install files when
     running <tt>make install</tt>.
- \c -DLIBRARY_INSTALL_DIR={path} (default lib): Library install
     location appended to the install prefix.
- \c -DINCLUDE_INSTALL_DIR={path} (default include/pelican): Header file install
     location appended to the install prefix.
- \c -DCMAKE_CXX_COMPILER={complier} (default: c++): Sets the C++ compiler.
- \c -DCMAKE_C_COMPILER={compiler} (default: gcc): Sets the C compiler.
- \c -DTIMER={true or false} (default: false): Enable additional debug timer.
- \c -DBUILD_STATIC={off or on} (default off): Build static versions of libraries.


*/
