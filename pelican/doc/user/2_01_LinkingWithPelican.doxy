/**
\page user_linkingPelican Linking against Pelican

\section user_linkingPelican_intro Introduction

Pelican is a C++ library and can be incorporated into your build system in the
same way as you would incorporate any other C++ library. After obtaining a copy
of Pelican (either from a binary distribution or building from source) you
should be able to find two Pelican libraries (pelican and pelican-testutils)
and a folder containing a complete set of header (.h) files.


\em pelican, the core framework library provides all the functionality of
pelican and is the one to link against when building your pelican application.
e.g.
@code
g++ -o myApp myApp.cpp -I<path_to_pelican_include> -l myLib -l pelican
@endcode

The \em pelican-testutils library
provides a number of convenience classes targeted at writing unit
tests for the various modules that you are required to implement.
Link against this and the \em pelican library when building your unit tests.
e.g.
@code
g++ -o myUnitTest myUnitTest.cpp -l pelican-testutils -l pelican
@endcode




\section user_linkingPelican_cmake Pelican CMake module
Pelican should provide a CMake (www.cmake.org) file to allow you to find pelican as installed
on your system. Look in your systems application data directory to find this
file (e.g. /usr/share/pelican, /usr/local/share/pelican ).

*/
