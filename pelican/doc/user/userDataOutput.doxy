/**
\page user_dataOutput Data Output

\section user_dataOutput_introduction Introduction 

The following sections of the reference documentation are relevant
for exporting data from Pelican:

\li \link user_referenceDataBlobs Data Blob reference\endlink
\li \link user_referenceOutputStreamers Output streamer reference\endlink

\section user_dataOuput Sending Data to an output stream from your pipeline

For simple cases, you just call the \em dataOutput() method :
@code
MyBlob* data;
dataOutput(data);
@endcode

This will push data onto an output stream named after the data's type ("MyBlob" in this case)
. The \em dataOutput() method can take a QString as a second argument to assign the data 
to an alternatively named stream. This can be useful where there you are exporting multiple streams
of the same data type.

It is important to realise that any DataBlob destined for output should implement the \em serialise() and \em deserialise() methods.
The actual destination of the data is controlled by the OutputStreamManager object. This can be configured
either through the configuration file, or you can manipulate the object directly. 

Pelican comes with a one OutputStreamer module that allows you to stream data over TCP to another machine.
But maybe this is insufficient for your needs. perhaps you have a custom file format, or a specific database
to fill. In this case you will need to write your own OutputStreamers. Note that any processing done in
an OutputStreamer is done serially with the pipeline processing, so it will slow down your pipeline. 
If this is an issue it is better to export it via the PelicanTCPBlobServer 
and process the streams elsewhere.

We take the example pipeline from previous sections to illustrate how the data output system works.
We will output the DataBlobExample object before and after processing to different streams, called "pre" and
"post". We will then connect different modules to these streams to show how to redirect the data.
The first thing to do is to instruct the pipeline to output data at the required points.

@code
void PipelineExample::run(QHash<QString, DataBlob*>& data)
{
    dataOutput( data["DataBlobExample1"), "pre" );
    // process this data
    .
    .
    .
    // output the processed data
    dataOutput( data["DataBlobExample1"), "post" );
}
@endcode

@subsubsection user_dataOutput_xmlconfig Configuring the Output Manager
So now we have two data streams which we can direct wherever is required. We will configure the output manager 
to redirect these streams: we will redirect both streams to the PelicanTCPBlobServer for 
export to other clients, the "post" stream we also direct to a comma seperated values file on the local machine
using the OutputStreamerExample object described in the \link user_referenceOutputStreamers Output streamer reference.\endlink
Similarly we direct the "pre" stream to a different comma seperated value 
using another instance of the OutputStreamerExample.

The \em <output> section of our configuration file will look like this
@code
<output>
    <streamers>
        <PelicanTCPBlobServer active="true" >
             <connection port="1234" />
        <PelicanTCPBlobServer/>`
        <OutputStreamerExample name="precsv" active="true">
             <file name="pre.csv" />
        </OutputStreamerExample>
        <OutputStreamerExample name="postcsv" active="true">
             <file name="post.csv" />
        </OutputStreamerExample>
    </streamers>
    <dataStreams>
       <Stream name="all" listeners="PelicanTCPBlobServer" />
       <Stream name="post" listeners="postcsv" />
       <Stream name="pre" listeners="precsv" />
    </dataStreams>
</output>
@endcode

The \em <streamers> section describes the configuration for each OutputStreamer. Its presence in the XML will cause the OutputManager
to attempt to instantiate an object of that type (unless the \em active attribute is set to false). Where there are more than two objects
of the same type, you must provide a \em name attribute to disambiguate them.

The \em <dataStreams> section is used to map the streams to these objects. 
The \em listeners attribute is a comma seperated list of the names of the streamers that should be associated with the named stream.
Note the special stream name "all" which will cause all streams to be piped to the listeners.

\section dataOutput_client Reading from the PelicanTCPBlobServer

By piping the streams to the PelicanTCPBlobServer we have the ability to connect from elsewhere to read any of the data streams
we are interested in. Pelican provides a client to attach to this server that can subscribe to any number of streams, reconstructing 
the DataBlob objects as they are passed over the TCP stream.

*/
