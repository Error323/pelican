# Usage:
#   INCLUDE_SETUP( Subdirectory fileList )
#
# Description:
#   For each file in the fileList a copy is made in BUILD_INCLUDE_DIR/Subdirectory
#   Dependency targets are set for SubDirectory/filename
#
SET(BUILD_INCLUDE_DIR ${CMAKE_BINARY_DIR}/include)
FILE(MAKE_DIRECTORY ${BUILD_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${BUILD_INCLUDE_DIR})

MACRO(INCLUDE_SETUP dest)
  FILE(MAKE_DIRECTORY ${BUILD_INCLUDE_DIR}/${dest})
  FOREACH(file ${ARGN})
      GET_FILENAME_COMPONENT(filename ${file} NAME )
      SET(in_file ${CMAKE_CURRENT_BINARY_DIR}/${dest}_${filename})
      SET(out_file ${BUILD_INCLUDE_DIR}/${dest}/${filename})
      FILE(WRITE ${in_file}
          "#include \"${CMAKE_CURRENT_SOURCE_DIR}/${file}\"\n"
          )
      CONFIGURE_FILE(${in_file} ${out_file} COPYONLY)
      INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${file} DESTINATION ${INCLUDE_INSTALL_DIR}/${dest} )
  ENDFOREACH(file)
ENDMACRO(INCLUDE_SETUP dest)

# -- generate the info for config.h
INCLUDE(CheckIncludeFiles)
INCLUDE(TestBigEndian)
TEST_BIG_ENDIAN(WORDS_BIGENDIAN)
CHECK_INCLUDE_FILES(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES("sys/param.h;sys/mount.h" HAVE_SYS_MOUNT_H)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILES(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILES("string.h" HAVE_STRING_H)
CHECK_INCLUDE_FILES("sys/stat.h" HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES("sys/types.h" HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES( unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES( memory.h HAVE_MEMORY_H)

#
# Load in Package Dependencies
#

MACRO( PACKAGE_DEPENDENCIES )
    # add specific packages
    set(config_header "${BUILD_INCLUDE_DIR}/config.h")
    set(config_in_file "${CMAKE_CURRENT_BINARY_DIR}/config.h.in")
    CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake/config.h.in "${config_in_file}")
    FOREACH(pack ${ARGN})
        #message( "Looking for Package ${pack}" )
        string(TOUPPER ${pack} packvar)
        FIND_PACKAGE(${pack})
        IF(${packvar}_FOUND)
            FILE(APPEND ${config_in_file}
                "#define HAVE_${packvar} 1\n"
            )
        ENDIF(${packvar}_FOUND)
    ENDFOREACH(pack)
    CONFIGURE_FILE(${config_in_file} "${config_header}")
ENDMACRO( PACKAGE_DEPENDENCIES )

#
# Define a directory as a SUBPACKAGE( packageName subpackage_dependencies )
# 

MACRO( SUBPACKAGE_ADD_LIBRARIES )
    IF(SUBPACKAGE_CURRENT)
        LIST(INSERT SUBPACKAGE_LIBRARIES 0 ${ARGN})
        LIST(INSERT SUBPACKAGE_${SUBPACKAGE_CURRENT}_LIBS 0 ${ARGN})
        FILE(APPEND ${SUBPACKAGE_FILE}
            "LIST(INSERT SUBPACKAGE_${SUBPACKAGE_CURRENT}_LIBS 0 ${ARGN})\n"
            )
    ELSE(SUBPACKAGE_CURRENT)
        MESSAGE("Error: SUBPACKAGE_ADD_LIBRARIES specified outside of a SUBPACKAGE context")
    ENDIF(SUBPACKAGE_CURRENT)
ENDMACRO( SUBPACKAGE_ADD_LIBRARIES )

#
# private macro to generate the SUBPACKAGE_LIBRARIES variable
#
MACRO( SUBPACKAGE_GET_LIBS package )
    IF(NOT SUBPACKAGE_${package}_ADDED)
    FOREACH(pack ${SUBPACKAGE_${package}_DEPS} )
        SUBPACKAGE_GET_LIBS(${pack})
    ENDFOREACH(pack)
    IF(SUBPACKAGE_${package}_LIBS)
    LIST(INSERT SUBPACKAGE_LIBRARIES 0 ${SUBPACKAGE_${package}_LIBS})
    ENDIF(SUBPACKAGE_${package}_LIBS)
    SET(SUBPACKAGE_${package}_ADDED TRUE)
    ENDIF(NOT SUBPACKAGE_${package}_ADDED)
ENDMACRO( SUBPACKAGE_GET_LIBS )

SET(SUBPACKAGE_WORK_DIR ${CMAKE_BINARY_DIR}/_subpackages)
mark_as_advanced(SUBPACKAGE_CURRENT)
mark_as_advanced(SUBPACKAGE_WORK_DIR)
mark_as_advanced(SUBPACKAGE_LIBRARIES)

FILE(MAKE_DIRECTORY ${SUBPACKAGE_WORK_DIR})
#
# macro to generate requirements for a SUBPACKAGE
# and load dependencies
#
MACRO( SUBPACKAGE package )
    set(SUBPACKAGE_CURRENT "${package}")
    set(SUBPACKAGE_${package}_DEPS ${ARGN})
    IF(SUBPACKAGE_${package}_DEPS)
        LIST(REVERSE SUBPACKAGE_${package}_DEPS)
    ENDIF(SUBPACKAGE_${package}_DEPS)
    set(SUBPACKAGE_FILE "${SUBPACKAGE_WORK_DIR}/${package}.cmake")
    FILE(WRITE ${SUBPACKAGE_FILE}
        "# Autogenerated file for the package : ${package} - do not edit\n"
        "IF(SUBPACKAGE_${package}_LIBS)\n"
        "RETURN()\n"
        "ENDIF(SUBPACKAGE_${package}_LIBS)\n"
        "LIST(APPEND LOFAR_PACKAGES ${package} ${ARGN})\n"
        )
    IF(SUBPACKAGE_${package}_DEPS)
        FILE(APPEND ${SUBPACKAGE_FILE}
            "SET(SUBPACKAGE_${package}_DEPS ${SUBPACKAGE_${package}_DEPS})\n"
            )
    ENDIF(SUBPACKAGE_${package}_DEPS)
    # -- all include directories defined before the macro call are exported
    IF(COMMAND GET_PROPERTY)
        get_property( includes DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES )
    ELSE(COMMAND GET_PROPERTY)
        # -- cmake 2.4 compatablity, just include everything
        set(includes ${CMAKE_INCLUDE_PATH})
    ENDIF(COMMAND GET_PROPERTY)
    FOREACH(inc ${includes})
        FILE(APPEND ${SUBPACKAGE_FILE}
            "include_directories(${inc})\n"
            )
    ENDFOREACH(inc)
    FOREACH(pack ${ARGN})
        FILE(APPEND ${SUBPACKAGE_FILE}
            "include( ${SUBPACKAGE_WORK_DIR}/${pack}.cmake )\n"
            )
    ENDFOREACH(pack)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}) # top level package directory for includes
    FOREACH(dep ${SUBPACKAGE_${package}_DEPS} )
        include(${SUBPACKAGE_WORK_DIR}/${dep}.cmake)
        SUBPACKAGE_GET_LIBS(${dep})
    ENDFOREACH(dep)
    IF(SUBPACKAGE_LIBRARIES)
    LIST(REMOVE_DUPLICATES SUBPACKAGE_LIBRARIES)
    ENDIF(SUBPACKAGE_LIBRARIES)
    FILE(APPEND ${SUBPACKAGE_FILE}
        "IF(LOFAR_PACKAGES)\n"
        "LIST(REMOVE_DUPLICATES LOFAR_PACKAGES)\n"
        "ENDIF(LOFAR_PACKAGES)\n"
        )
ENDMACRO( SUBPACKAGE )
